// Apply the base plugin to the root project
plugins {
    id 'base'
    id 'java'
}

// Configuration for all projects including the root project
allprojects {
    group = 'com.mleitz1.quarkus'
    version = '0.1.1-SNAPSHOT'

    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    apply plugin: 'idea'
    apply plugin: 'java'

    java {
        toolchain {
            // Only support Mandrel v24 currently - TODO support more jdk versions
            languageVersion = JavaLanguageVersion.of(24)
        }
    }

    tasks.withType(Test) {
        jvmArgs = [
                '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util.concurrent=ALL-UNNAMED'
        ]
    }

    idea {
        module {
            downloadJavadoc = true
        }
    }
}

// Common configuration by type for subprojects
subprojects {
}

// Helper method to create aggregate tasks
def createAggregateTask(String taskName, String targetTaskName, String successMessage) {
    tasks.register(taskName) {
        dependsOn subprojects*.tasks*.matching { it.name == targetTaskName }
        description = "${taskName.capitalize()} all subprojects"
        group = 'build'
        doLast {
            println successMessage
        }
    }
}

// Root project tasks
createAggregateTask('buildAll', 'build', 'All subprojects have been built successfully!')
createAggregateTask('cleanAll', 'clean', 'All subprojects have been cleaned successfully!')

// Display all projects in the build
tasks.register('listProjects') {
    doLast {
        def maxNameLength = rootProject.allprojects.collect { it.name.length() }.max()

        println "Root project: ${rootProject.name}"
        println "Subprojects:"
        subprojects.each { project ->
            println "- ${project.name.padRight(maxNameLength)} - ${project.description}"
        }
    }
}

// Default task when running gradle without arguments
defaultTasks 'listProjects'

task buildExampleQuarkusNativeBasic {
    group = 'build'
    description = 'Builds the example-quarkus-native-basic subproject'
    dependsOn ':example-quarkus-native-basic:build'
}
