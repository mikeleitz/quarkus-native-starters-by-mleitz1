// Root build.gradle for quarkus-native-starters
// Apply the base plugin to the root project
plugins {
    id 'base'
    id 'java'

}

// Configuration for all projects including the root project
allprojects {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
}

def determineProjectType(String projectName) {
    if (projectName.startsWith('example-')) return 'QUARKUS_EXAMPLE'
    if (projectName.contains('template')) return 'QUARKUS_TEMPLATE'
    if (projectName.contains('helper') || projectName.contains('plugin')) return 'GRADLE_PLUGIN'
    return 'UTILITY'
}

// Common configuration by type for subprojects
subprojects {
    def projectType = determineProjectType(project.name)

    // Common configuration...
    apply plugin: 'java'

    // Configure based on project type
    switch(projectType) {
        case 'GRADLE_PLUGIN':
            configureGradlePlugin(project)
            break
        case 'QUARKUS_EXAMPLE':
            configureQuarkusExample(project)
            break
        case 'QUARKUS_TEMPLATE':
            configureQuarkusTemplate(project)
            break
        case 'UTILITY':
            configureUtility(project)
            break
    }
}

def configureGradlePlugin(Project project) {
    // Create as wide of a distribution for the plugins as possible.
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
    }
}

def configureQuarkusExample(Project project) {

}

def configureQuarkusTemplate(Project project) {
    // N/a
}

def configureUtility(Project project) {
    // N/a
}

// Helper method to create aggregate tasks
def createAggregateTask(String taskName, String targetTaskName, String successMessage) {
    tasks.register(taskName) {
        dependsOn subprojects*.tasks*.matching { it.name == targetTaskName }
        description = "${taskName.capitalize()} all subprojects"
        group = 'build'
        doLast {
            println successMessage
        }
    }
}

// Root project tasks
createAggregateTask('buildAll', 'build', 'All subprojects have been built successfully!')
createAggregateTask('cleanAll', 'clean', 'All subprojects have been cleaned successfully!')

// Display all projects in the build
tasks.register('listProjects') {
    doLast {
        def maxNameLength = rootProject.allprojects.collect { it.name.length() }.max()

        println "Root project: ${rootProject.name}"
        println "Subprojects:"
        subprojects.each { project ->
            println "- ${project.name.padRight(maxNameLength)} - ${project.description}"
        }
    }
}

// Default task when running gradle without arguments
defaultTasks 'listProjects'
