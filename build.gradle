plugins {
    id 'base'
    id 'java'
    // Have to define these here but apply them in a separate line in the subprojects section
    id 'io.quarkus' version "${quarkusPluginVersion}" apply false
    id 'com.mleitz1.quarkus.quarkus-build-helper' apply false
}

// Configuration for all projects including the root project
allprojects {
    group = 'com.mleitz1.quarkus'
    version = '0.1.0'

    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    apply plugin: 'idea'
    apply plugin: 'java'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(24)
        }
    }

    tasks.withType(Test) {
        jvmArgs = [
                '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util=ALL-UNNAMED',
                '--add-opens', 'java.base/java.util.concurrent=ALL-UNNAMED'
        ]
    }

    idea {
        module {
            downloadJavadoc = true
        }
    }
}

// Common configuration by type for subprojects
subprojects {
// EXCLUDE the plugin project from Quarkus configuration
    if (project.name != 'quarkus-build-helper-by-mleitz1') {
        // Common configuration for Quarkus application subprojects only
        apply plugin: 'io.quarkus'
        apply plugin: 'com.mleitz1.quarkus.quarkus-build-helper'

        // Adding behavior to quarkus plugin's integration tests
        // ... rest of your Quarkus-specific configuration
        tasks.named('quarkusIntTest', Test) {
            // Integration tests should run after native build
            dependsOn 'quarkusBuild'

            // Ensure test profile is used for Dev Services
            systemProperty 'quarkus.profile', 'test'
            systemProperty 'quarkus.test.profile', 'test'

            // Enable Dev Services explicitly
            systemProperty 'quarkus.devservices.enabled', 'true'

            // Configure test reporting
            reports {
                html.required = true
                junitXml.required = true
            }

            // Create a little report for these native integration tests
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                exceptionFormat "full"
                showCauses true
                showExceptions true
                showStackTraces true
                showStandardStreams false
            }

            // Print summary at the end
            afterSuite { desc, result ->
                def reportFile = file("build/reports/tests/integrationTest/index.html")

                if (!desc.parent) { // Only execute for the root suite
                    println ""
                    println "Integration Test Results:"
                    println "========================"
                    println "Tests: ${result.testCount}"
                    println "Passed: ${result.successfulTestCount}"
                    println "Failed: ${result.failedTestCount}"
                    println "Skipped: ${result.skippedTestCount}"
                    println "Success rate: ${result.successfulTestCount}/${result.testCount} (${Math.round(result.successfulTestCount * 100 / result.testCount)}%)"
                    println "========================"

                    if (reportFile.exists()) {
                        println "HTML Report: file://${reportFile.absolutePath}"
                    }
                }
            }
        }

        // Make build depend on integration tests
        tasks.named('build') {
            dependsOn 'quarkusIntTest'
        }
    }
}

// Helper method to create aggregate tasks
def createAggregateTask(String taskName, String targetTaskName, String successMessage) {
    tasks.register(taskName) {
        dependsOn subprojects*.tasks*.matching { it.name == targetTaskName }
        description = "${taskName.capitalize()} all subprojects"
        group = 'build'
        doLast {
            println successMessage
        }
    }
}

// Root project tasks
createAggregateTask('buildAll', 'build', 'All subprojects have been built successfully!')
createAggregateTask('cleanAll', 'clean', 'All subprojects have been cleaned successfully!')

// Display all projects in the build
tasks.register('listProjects') {
    doLast {
        def maxNameLength = rootProject.allprojects.collect { it.name.length() }.max()

        println "Root project: ${rootProject.name}"
        println "Subprojects:"
        subprojects.each { project ->
            println "- ${project.name.padRight(maxNameLength)} - ${project.description}"
        }
    }
}

// Default task when running gradle without arguments
defaultTasks 'listProjects'
